description: |
  ### Document Name - EncryptRDSInstance

  ## What does this document do?
  This document is used to create an encrypted copy of an unencrypted RDS instance.

  ## Input Parameters
  * DBInstanceResourceId: (Optional) Resource ID of the unencrypted DB instance. Either `DBInstanceResourceId` or `DBInstanceIdentifier` must be specified.
  * DBInstanceIdentifier: (Optional) Identifier of the unencrypted DB instance. Either `DBInstanceResourceId` or `DBInstanceIdentifier` must be specified.
  * DBSnapshotIdentifier: (Optional) Identifier for the unencrypted DB snapshot. The default name is the `DBInstanceIdentifier` parameter value appended with the the date and time of the snapshot's creation (DBInstanceIdentifier-yyyymmddhhmmss). Note that this snapshot will be deleted as part of this document's execution.
  * EncryptedDBSnapshotIdentifier: (Optional) Identifier for the encrypted DB snapshot. The default name is the `DBSnapshotIdentifier` parameter value appended with `-encrypted`.
  * KmsKeyId: (Optional) ID, ARN or Alias for the AWS KMS Customer Master Key (CMK). If no key is specified, the default encryption key for snapshots (`alias/aws/rds`) will be used.
  * InstanceTags: (Optional) Tags to be added to the DB instance. (example: Key=tagKey1,Value=tagValue1;Key=tagKey2,Value=tagValue2)
  * SnapshotTags: (Optional) Tags to be added to the DB snapshot. (example: Key=tagKey1,Value=tagValue1;Key=tagKey2,Value=tagValue2)
  * AutomationAssumeRole: (Required) ARN of the role that allows Automation to perform the actions.

  ## Output Parameters
  * RestoreRdsFromEncryptedSnapshot.EncryptedDBInstanceIdentifier: Identifier of the encrypted DB instance.

  ## Minimum Permissions Required
  * `rds:DescribeDBInstances`
  * `rds:DescribeDBSnapshots`
  * `rds:AddTagsToResource`
  * `rds:ListTagsForResource`
  * `rds:CreateDBSnapshot`
  * `rds:CopyDBSnapshot`
  * `rds:DeleteDBSnapshot`
  * `rds:ModifyDBInstance`
  * `rds:RestoreDBInstanceFromDBSnapshot`
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
outputs:
  - RestoreRdsFromEncryptedSnapshot.EncryptedDBInstanceIdentifier
parameters:
  DBInstanceResourceId:
    type: String
    description: (Optional) Resource ID of the unencrypted DB instance. Either `DBInstanceResourceId` or `DBInstanceIdentifier` must be specified.
    default: ""
  DBInstanceIdentifier:
    type: String
    description: (Optional) Identifier of the unencrypted DB instance. Either `DBInstanceResourceId` or `DBInstanceIdentifier` must be specified.
    default: ""
    allowedPattern: ^[a-zA-Z]*([-]?[\w]+)*$
  DBSnapshotIdentifier:
    type: String
    description: (Optional) Identifier for the unencrypted DB snapshot. The default name is DBInstanceIdentifier-yyyymmddhhmmss.
    default: ""
    allowedPattern: ^([\w{}]*[\-\w]*[\w{}])*$
  EncryptedDBSnapshotIdentifier:
    type: String
    description: (Optional) Identifier for the encrypted DB snapshot. The default name is the `DBSnapshotIdentifier` parameter value appended with `-encrypted`.
    default: ""
    allowedPattern: ^([\w{}]*[\-\w]*[\w{}])*$
  KmsKeyId:
    type: String
    description: (Optional) ID, ARN or Alias of the AWS KMS Customer Master Key (CMK).
    default: "alias/aws/rds"
    allowedPattern: ^([\w\s_.:\/=+\-;{},@]*)$
  InstanceTags:
    type: String
    default: ""
    description: "(Optional) Tags to be added to the DB instance. (example: Key=tagKey1,Value=tagValue1;Key=tagKey2,Value=tagValue2)"
    allowedPattern: ^([\w\s_.:\/=+\-;{},@]*)$
  SnapshotTags:
    type: String
    default: ""
    description: "(Optional) Tags to be added to the snapshot. (example: Key=tagKey1,Value=tagValue1;Key=tagKey2,Value=tagValue2)"
    allowedPattern: ^([\w\s_.:\/=+\-;{},@]*)$
  AutomationAssumeRole:
    type: String
    description: (Required) ARN of the role that allows Automation to perform the actions.
    allowedPattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/[\w+=,.@-]+
mainSteps:
  - name: GetRdsInstanceIdentifier
    action: "aws:executeScript"
    description: |
      ## GetRdsInstanceIdentifier
      Gets the identifier of the unencrypted DB instance.
      ## Inputs
      * DBInstanceResourceId: Resource ID of the unencrypted DB instance. Either `DBInstanceResourceId` or `DBInstanceIdentifier` must be specified.
      * DBInstanceIdentifier: Identifier of the unencrypted DB instance. Either `DBInstanceResourceId` or `DBInstanceIdentifier` must be specified.
      ## Outputs
      * DBInstanceIdentifier: Identifier of the unencrypted DB instance.
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        DBInstanceResourceId: "{{DBInstanceResourceId}}"
        DBInstanceIdentifier: "{{DBInstanceIdentifier}}"
      Script: |
        import boto3

        def handler(event, context):
            resource_id = event["DBInstanceResourceId"]
            instance_id = event["DBInstanceIdentifier"]
            if instance_id == "":
                rds_client = boto3.client("rds")
                instances = rds_client.describe_db_instances(Filters=[{
                    "Name": "dbi-resource-id",
                    "Values": [resource_id]
                }]).get("DBInstances", [{}])
                instance_id = instances[0].get("DBInstanceIdentifier", "")
            return {"instance_id": instance_id}
    outputs:
      - Name: DBInstanceIdentifier
        Selector: $.Payload.instance_id
        Type: String
    timeoutSeconds: 600
  - name: CreateRdsSnapshot
    action: "aws:executeScript"
    description: |
      ## CreateRdsSnapshot
      Creates an unencrypted snapshot of the unencrypted DB instance. This snapshot will be copied to an encrypted DB snapshot and then deleted in later steps.
      ## Inputs
      * DBInstanceIdentifier: Identifier of the unencrypted DB instance.
      * DBSnapshotIdentifier: Identifier for the unencrypted DB snapshot.
      * InstanceTags: Tags to be added to the DB instance.
      * SnapshotTags: Tags to be added to the DB snapshot.
      ## Outputs
      * DBSnapshotIdentifier: Identifier of the unencrypted DB snapshot.
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        DBInstanceIdentifier: "{{GetRdsInstanceIdentifier.DBInstanceIdentifier}}"
        DBSnapshotIdentifier: "{{DBSnapshotIdentifier}}"
        InstanceTags: "{{InstanceTags}}"
        SnapshotTags: "{{SnapshotTags}}"
      Script: |
        import json
        import re
        from datetime import datetime
        import boto3

        DB_INSTANCE_ID = "DBInstanceIdentifier"
        INSTANCE_TAGS = "InstanceTags"
        SNAPSHOT_ARN = "DBSnapshotArn"
        SNAPSHOT_ID = "DBSnapshotIdentifier"
        SNAPSHOT_TAGS = "SnapshotTags"
        PH_DATE = "date"
        PH_DATETIME = "datetime"
        PH_EXECUTION_ID = "execution-id"
        PH_INSTANCE_ID = "db-instance-id"
        PH_SNAPSHOT_ID = "db-snapshot-id"
        PH_TIME = "time"
        PH_TAG_VAL_STR = "{{{}}}"
        TAG_SHORTCUT_EXPR = "Key=(.+),\s*Value=(.*)"

        def parse_tags(tags_str):
            if re.match("({};?)+".format(TAG_SHORTCUT_EXPR), tags_str):
                matches = [re.match(TAG_SHORTCUT_EXPR, t.strip()) for t in tags_str.split(";")]
                return [{"Key": m.group(1), "Value": m.group(2) if m.lastindex > 1 else ""} for m in matches]
            else:
                return json.loads(tags_str)

        def build_tags(tag_str, context, tag_vars=None):
            if tag_str == "":
                return []
            placeholders = tag_data(ctx=context, tag_vars=tag_vars)
            tags = parse_tags(tag_str)
            for tag in tags:
                value = tag.get("Value")
                for p in placeholders:
                    value = value.replace(PH_TAG_VAL_STR.format(p), str(placeholders[p]))
                tag["Value"] = value
            return tags

        def template_string(s, context, str_vars=None):
            result = s
            data = tag_data(ctx=context, tag_vars=str_vars)
            for p in data:
                result = result.replace(PH_TAG_VAL_STR.format(p), str(data[p]))
            return result

        def tag_data(ctx, tag_vars):
            def clean(s):
                return s.replace(":", "").replace("-", "").replace("T", "")
            dt = datetime.now().replace(microsecond=0)
            data = {
                PH_DATETIME: clean(dt.isoformat()),
                PH_DATE: clean(dt.date().isoformat()),
                PH_TIME: clean(dt.time().isoformat()),
                PH_EXECUTION_ID: ctx.get("automation:EXECUTION_ID")
            }
            if tag_vars is not None:
                for t in tag_vars:
                    data[t] = tag_vars[t]
            return data

        def handler(event, context):
            client = boto3.client("rds")
            inst_id = event[DB_INSTANCE_ID]
            snapshot_str = event.get(SNAPSHOT_ID, "").strip()
            if snapshot_str == "":
                snapshot_str = "{db-instance-id}-{datetime}"
            tag_vars = {
                PH_INSTANCE_ID: inst_id,
                SNAPSHOT_ID: ""
            }
            snapshot_id = template_string(snapshot_str, context, tag_vars)
            args = {
                DB_INSTANCE_ID: inst_id,
                SNAPSHOT_ID: snapshot_id
            }
            response = client.create_db_snapshot(**args)
            snapshot_arn = response["DBSnapshot"]["DBSnapshotArn"]

            snapshot_tag_str = event.get(SNAPSHOT_TAGS, "")
            if len(snapshot_tag_str) > 0:
                snapshot_tags = build_tags(snapshot_tag_str, context, tag_vars)
                if len(snapshot_tags) > 0:
                    client.add_tags_to_resource(ResourceName=snapshot_arn, Tags=snapshot_tags)

            instance_tag_str = event.get(INSTANCE_TAGS, "")
            if len(instance_tag_str) > 0:
                tag_vars[PH_SNAPSHOT_ID] = snapshot_id
                instance_tags = build_tags(instance_tag_str, context, tag_vars)
                if len(instance_tags) > 0:
                    db_arn = ":".join(snapshot_arn.split(":")[0:5]) + ":db:" + inst_id
                    client.add_tags_to_resource(ResourceName=db_arn, Tags=instance_tags)
            return {"snapshot_id" : snapshot_id}
    outputs:
      - Name: DBSnapshotIdentifier
        Selector: $.Payload.snapshot_id
        Type: String
    timeoutSeconds: 600
  - name: VerifyRdsSnapshot
    action: "aws:executeScript"
    description: |
      ## VerifyRdsSnapshot
      Verifies that the unencrypted snapshot created in the previous step exists.
      ## Inputs
      * DBSnapshotIdentifier: Identifier of the unencrypted DB snapshot.
      ## Outputs
      This step has no outputs.
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        DBSnapshotIdentifier: "{{CreateRdsSnapshot.DBSnapshotIdentifier}}"
      Script: |
        import boto3
        import time

        rds_client = boto3.client("rds")

        def handler(event, context):
            snapshot_id = event["DBSnapshotIdentifier"]
            while True:
                try:
                    snapshots = rds_client.describe_db_snapshots(DBSnapshotIdentifier=snapshot_id).get("DBSnapshots", [{}])
                    if snapshots[0].get("Status", "") == "available":
                        return
                    time.sleep(20)
                except Exception as e:
                    print(e)
                    time.sleep(20)
                    pass
    timeoutSeconds: 600
  - name: CopyRdsSnapshotToEncryptedRdsSnapshot
    action: "aws:executeScript"
    description: |
      ## CopyRdsSnapshotToEncryptedRdsSnapshot
      Copies the previously created unencrypted DB snapshot to an encrypted DB snapshot.
      ## Inputs
      * DBSnapshotIdentifier: Identifier of the unencrypted DB snapshot.
      * EncryptedDBSnapshotIdentifier: Identifier for the encrypted DB snapshot.
      * KmsKeyId: ID, ARN or Alias for the AWS KMS Customer Master Key (CMK).
      ## Outputs
      * EncryptedDBSnapshotIdentifier: Identifier of the encrypted DB snapshot.
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        DBSnapshotIdentifier: "{{CreateRdsSnapshot.DBSnapshotIdentifier}}"
        EncryptedDBSnapshotIdentifier: "{{EncryptedDBSnapshotIdentifier}}"
        KmsKeyId: "{{KmsKeyId}}"
      Script: |
        import boto3
        from datetime import datetime

        def handler(event, context):
            SOURCE_SNAPSHOT_ID = event["DBSnapshotIdentifier"]
            DEST_SNAPSHOT_ID = event["EncryptedDBSnapshotIdentifier"]
            if event["EncryptedDBSnapshotIdentifier"] == "":
                DEST_SNAPSHOT_ID = event["DBSnapshotIdentifier"] + "-encrypted"
            kmskey_id = event["KmsKeyId"]
            if event["KmsKeyId"] == "":
                kmskey_id = "alias/aws/rds"
            client = boto3.client("rds")
            response = client.copy_db_snapshot(
                SourceDBSnapshotIdentifier=SOURCE_SNAPSHOT_ID,
                TargetDBSnapshotIdentifier=DEST_SNAPSHOT_ID,
                KmsKeyId=kmskey_id,
                CopyTags=True,
            )
            snapshot_id = response["DBSnapshot"]["DBSnapshotIdentifier"]
            return {"snapshot_id" : snapshot_id}
    outputs:
      - Name: EncryptedDBSnapshotIdentifier
        Selector: $.Payload.snapshot_id
        Type: String
    timeoutSeconds: 600
  - name: VerifyEncryptedRdsSnapshot
    action: "aws:executeScript"
    description: |
      ## VerifyEncryptedRdsSnapshot
      Verifies that the encrypted DB snapshot created in the previous step exists.
      ## Inputs
      * EncryptedDBSnapshotIdentifier: Identifier of the encrypted DB snapshot.
      ## Outputs
      This step has no outputs.
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        EncryptedDBSnapshotIdentifier: "{{CopyRdsSnapshotToEncryptedRdsSnapshot.EncryptedDBSnapshotIdentifier}}"
      Script: |
        import boto3
        import time

        rds_client = boto3.client("rds")

        def handler(event, context):
            snapshot_id = event["EncryptedDBSnapshotIdentifier"]
            while True:
                try:
                    snapshots = rds_client.describe_db_snapshots(DBSnapshotIdentifier = snapshot_id).get("DBSnapshots", [{}])
                    if snapshots[0].get("Status", "") == "available" and snapshots[0].get("Encrypted", False) == True:
                        return
                    time.sleep(20)
                except Exception as e:
                    print(e)
                    time.sleep(20)
                    pass
    timeoutSeconds: 600
  - name: DeleteUnencryptedRdsSnapshot
    action: "aws:executeScript"
    description: |
      ## DeleteUnencryptedRdsSnapshot
      Deletes the unencrypted DB snapshot.
      ## Inputs
      * DBSnapshotIdentifier: Identifier of the unencrypted DB snapshot.
      ## Outputs
      This step has no outputs.
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        DBSnapshotIdentifier: "{{CreateRdsSnapshot.DBSnapshotIdentifier}}"
      Script: |
        import boto3
        import time

        rds_client = boto3.client("rds")

        def handler(event, context):
            snapshot_id = event["DBSnapshotIdentifier"]
            wait_period = 5
            retries = 5
            while True:
                try:
                    rds_client.delete_db_snapshot(DBSnapshotIdentifier=snapshot_id)
                    return True
                except Exception as ex:
                    # As the list of snapshot is eventually consistent old snapshots might appear in listed snapshots
                    if getattr(ex, "response", {}).get("Error", {}).get("Code", "") == "InvalidSnapshot.NotFound":
                        return False
                    # Throttling might occur when deleting snapshots too fast
                    if "throttling" in ex.message.lower():
                        retries -= 1
                        if retries == 0:
                            raise ex
                        time.sleep(wait_period)
                        wait_period = min(wait_period + 10 , 30)
                        continue
                    raise ex
    timeoutSeconds: 600
  - name: RenameUnencryptedInstance
    action: "aws:executeAwsApi"
    description: |
      ## RenameUnencryptedInstance
      Renames the unencrypted DB instance.
      ## Inputs
      * DBInstanceIdentifier: Identifier of the unencrypted DB instance to be renamed.
      * NewDBInstanceIdentifier: Identifier of the encrypted DB instance to be renamed to.
      ## Outputs
      * UnencryptedDBSubnetGroupName: Subnet group name of the unencrypted DB instance.
    inputs:
      Service: rds
      Api: ModifyDBInstance
      DBInstanceIdentifier: "{{GetRdsInstanceIdentifier.DBInstanceIdentifier}}"
      NewDBInstanceIdentifier: "{{GetRdsInstanceIdentifier.DBInstanceIdentifier}}-unencrypted"
      ApplyImmediately: True
    outputs:
      - Name: UnencryptedDBSubnetGroupName
        Selector: $.DBInstance.DBSubnetGroup.DBSubnetGroupName
        Type: String
    timeoutSeconds: 600
  - name: VerifyRenamedRdsInstance
    action: "aws:executeScript"
    description: |
      ## VerifyRenamedRdsInstance
      Verifies that the unencrypted DB instance is renamed in the previous step.
      ## Inputs
      * RenamedDBInstanceIdentifier: Identifier of the renamed DB instance.
      ## Outputs
      This step has no outputs.
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        RenamedDBInstanceIdentifier: "{{GetRdsInstanceIdentifier.DBInstanceIdentifier}}-unencrypted"
      Script: |
        import boto3
        import time

        rds_client = boto3.client("rds")

        def handler(event, context):
            instance_id = event["RenamedDBInstanceIdentifier"]
            while True:
                try:
                    instances = rds_client.describe_db_instances(DBInstanceIdentifier=instance_id).get("DBInstances", [{}])
                    if instances[0].get("DBInstanceStatus", "") == "available":
                        return
                    time.sleep(20)
                except Exception as e:
                    print(e)
                    time.sleep(20)
                    pass
    timeoutSeconds: 600
  - name: RestoreRdsFromEncryptedSnapshot
    action: "aws:executeAwsApi"
    description: |
      ## RestoreRdsFromEncryptedSnapshot
      Restores the encrypted DB instance from the encrypted DB snapshot.
      ## Inputs
      * DBInstanceIdentifier: Identifier for the encrypted DB instance.
      * DBSnapshotIdentifier: Identifier of the encrypted DB snapshot.
      * DBSubnetGroupName: Subnet group name for the encrypted DB instance.
      ## Outputs
      * EncryptedDBInstanceIdentifier: Identifier of the encrypted DB instance.
    inputs:
      Service: rds
      Api: RestoreDBInstanceFromDBSnapshot
      DBInstanceIdentifier: "{{GetRdsInstanceIdentifier.DBInstanceIdentifier}}"
      DBSnapshotIdentifier: "{{CopyRdsSnapshotToEncryptedRdsSnapshot.EncryptedDBSnapshotIdentifier}}"
      DBSubnetGroupName: "{{RenameUnencryptedInstance.UnencryptedDBSubnetGroupName}}"
    outputs:
      - Name: EncryptedDBInstanceIdentifier
        Selector: $.DBInstance.DBInstanceIdentifier
        Type: String
    timeoutSeconds: 600
  - name: VerifyEncryptedRdsInstance
    action: "aws:executeScript"
    description: |
      ## VerifyEncryptedRdsInstance
      Verifies that the encrypted DB instance created in the previous step exists.
      ## Inputs
      * EncryptedDBInstanceIdentifier: Identifier of the encrypted DB instance.
      ## Outputs
      This step has no outputs.
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        EncryptedDBInstanceIdentifier: "{{RestoreRdsFromEncryptedSnapshot.EncryptedDBInstanceIdentifier}}"
      Script: |
        import boto3
        import time

        rds_client = boto3.client("rds")

        def handler(event, context):
            instance_id = event["EncryptedDBInstanceIdentifier"]
            while True:
                try:
                    instances = rds_client.describe_db_instances(DBInstanceIdentifier = instance_id).get("DBInstances", [{}])
                    if instances[0].get("StorageEncrypted", False) == True:
                        return
                    time.sleep(20)
                except Exception as e:
                    print(e)
                    time.sleep(20)
                    pass
    timeoutSeconds: 600
    isEnd: true
